datasource db {
  url      = env("POSTGRES_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id              Int                      @id @default(autoincrement())
  name            String
  token           String
  dex             String
  displayToken    String                   @default("TOKEN")
  chainId         Int
  website         String?
  addLiquidity    String?
  message         String?
  liquiditySource String?
  logo            String?
  payoutAddress   String?
  records         ProjectRecord[]
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  competitions    CompetitionsOnProjects[]

  @@unique([token, chainId, dex])
}

model ProjectRecord {
  id                    Int      @id @default(autoincrement())
  project               Project  @relation(fields: [projectToken, projectChainId, projectDex], references: [token, chainId, dex])
  projectToken          String
  projectChainId        Int
  projectDex            String
  tvl                   Int
  incentiveTokenTvl     Int?
  participatingTokenTvl Int?
  earnings              Float
  currentMonthEarnings  Float    @default(0)
  date                  DateTime
  Payout                Payout?
  reward                Reward?  @relation(fields: [rewardId], references: [id])
  rewardId              Int?
}

model Payout {
  id              Int           @id @default(autoincrement())
  projectRecord   ProjectRecord @relation(fields: [projectRecordId], references: [id])
  projectRecordId Int           @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  processedAt     DateTime?
  payoutAddress   String
  value           Float
  tokenAddress    String
  processed       Boolean       @default(false)
  isProcessing    Boolean       @default(false)
  hash            String?
}

model Competition {
  id          Int                      @id @default(autoincrement())
  slug        String                   @unique
  name        String                   @unique
  description String?
  startDate   DateTime
  endDate     DateTime
  rewards     Reward[]
  projects    CompetitionsOnProjects[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  @@unique([name, startDate, endDate])
}

model Reward {
  id            Int             @id @default(autoincrement())
  competition   Competition     @relation(fields: [competitionId], references: [id])
  competitionId Int
  chainId       Int
  value         Float
  name          String          @default("TOKEN")
  tokenAddress  String
  records       ProjectRecord[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model CompetitionsOnProjects {
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId Int
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     Int
  assignedAt    DateTime    @default(now())

  @@id([competitionId, projectId])
}
